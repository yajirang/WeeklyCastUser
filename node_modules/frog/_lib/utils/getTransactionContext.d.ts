import type { Context as Context_Hono, HonoRequest, Input } from 'hono';
import type { Context, TransactionContext } from '../types/context.js';
import type { Env } from '../types/env.js';
type GetTransactionContextParameters<env extends Env = Env, path extends string = string, input extends Input = {}, _state = env['State']> = {
    context: Context<env, path, input, _state>;
    contextHono: Context_Hono<env, path, input>;
    initialState: ((c: Context_Hono<env>) => _state | Promise<_state>) | _state | undefined;
    req: HonoRequest;
};
type GetTransactionContextReturnType<env extends Env = Env, path extends string = string, input extends Input = {}, _state = env['State']> = Promise<{
    context: TransactionContext<env, path, input, _state>;
}>;
export declare function getTransactionContext<env extends Env, path extends string, input extends Input, _state = env['State']>(parameters: GetTransactionContextParameters<env, path, input, _state>): GetTransactionContextReturnType<env, path, input, _state>;
export {};
//# sourceMappingURL=getTransactionContext.d.ts.map