import { getIntentState } from './getIntentState.js';
export async function getSignatureContext(parameters) {
    const { context, contextHono } = parameters;
    const { env, frameData, initialPath, previousButtonValues, req, status, verified, url, } = context || {};
    const previousState = await (async () => {
        if (context.previousState)
            return context.previousState;
        if (typeof parameters.initialState === 'function')
            return await parameters.initialState(contextHono);
        return parameters.initialState;
    })();
    const { buttonValue, inputText } = getIntentState({
        buttonValues: previousButtonValues || [],
        frameData,
    });
    return {
        context: {
            address: frameData?.address,
            buttonIndex: frameData?.buttonIndex,
            buttonValue,
            env,
            error: (data) => ({
                error: data,
                format: 'signature',
                status: 'error',
            }),
            frameData,
            initialPath,
            inputText,
            previousButtonValues,
            previousState: previousState,
            req,
            res(parameters) {
                const { chainId, method, params } = parameters;
                const { domain, types, primaryType, message } = params;
                const response = {
                    chainId,
                    method,
                    params: {
                        domain,
                        types,
                        primaryType,
                        // @TODO: fix typing
                        message: message,
                    },
                };
                return { data: response, format: 'signature', status: 'success' };
            },
            signTypedData(parameters) {
                const { chainId, ...params } = parameters;
                return this.res({
                    params: params,
                    chainId,
                    method: 'eth_signTypedData_v4',
                });
            },
            status,
            var: context.var,
            verified,
            url,
        },
    };
}
//# sourceMappingURL=getSignatureContext.js.map